name: Olympix Security 
on: 
  workflow_call:
    secrets:
      OLYMPIX_API_TOKEN:
        required: true

jobs:
  security:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: false

      - name: List files in caller repo
        run: |
          echo "Files in the repo:"
          find . -type f

      - name: Checkout (Reusable)
        uses: actions/checkout@v3
        with: 
          repository: pthakur-circle/integrate-repo
          ref: main
          path: ./integrate-repo

      # For text file 
      # - name: Read arguments from file
      #   id: read_args
      #   run: |
      #     REPO_NAME="${{ github.repository }}"
      #     ARGS=$(awk -v repo="$REPO_NAME" '$1 == repo { $1 = ""; print $0 }' ./integrate-repo/rule.txt | tr '\n' ' ')
      #     if [ -z "$ARGS" ]; then
      #       echo "No arg found for $REPO_NAME"
      #       ARGS=""
      #     else
      #       echo "Args found for $REPO_NAME: $ARGS"
      #     fi
      #     echo "args=${ARGS}" >> $GITHUB_ENV

      # For JSON file
      - name: Read arguments from file
        id: read_args
        run: |
          REPO_NAME="${{ github.repository }}"
          VUL_IDS=$(jq -r --arg repo "$REPO_NAME" 'if has($repo) then .[$repo] | join(" ") else "" end' ./integrate-repo/rule.json)
          if [ "$ARGS" = "null" ]; then
            echo "No args"
          else
            ARGS=$(echo $VUL_IDS | awk '{for(i=1;i<=NF;i++) $i="--no-"$i}1')
            echo "Vul: $VUL_IDS"
            echo "Args for $REPO_NAME: $ARGS"
          fi
          echo "args=$ARGS" >> $GITHUB_ENV

      - name: Debug-Print args
        run: echo "Args = ${{ env.args }}"

      - name: Run Olympix Integrated Security
        id: run_olympix
        uses: olympix/integrated-security@main
        env:
          OLYMPIX_API_TOKEN: ${{ secrets.OLYMPIX_API_TOKEN }}
          required: true
        with: 
          args: -f sarif -o ./integrate-repo ${{ env.args }}

      
      # - name: Check for SARIF file
      #   id: check_sarif
      #   run: |
      #     if [ -f ./integrate-repo/olympix.sarif ]; then
      #       echo "SARIF file found"
      #       echo "sarif_file_exists = true" >> GITHUB_ENV
      #     else
      #       echo "SARIF file not found"
      #       echo "sarif_file_exists = false" >> GITHUB_ENV

      # - name: Filter out test files
      #   run: | 
      #     jq 'del(.runs[].results[] | select(.locations[].physicalLocation.artifactLocation.uri | endswith(".t.sol")))' ./integrate-repo/olympix.sarif > ./integrate-repo/filtered_olympix.sarif

      - name: filter-sarif
        uses: advanced-security/filter-sarif@v1
        with:
          patterns: |
            -**/*t.sol
          input: ./integrate-repo/olympix.sarif
          output: ./integrate-repo/filtered_olympix.sarif

      - name: Upload result to GitHub Code Scanning
        # if: steps.check_sarif.outputs.sarif_file_exists == 'true'
        uses: github/codeql-action/upload-sarif@v2
        with:
          # sarif_file: ./integrate-repo/olympix.sarif
          sarif_file: ./integrate-repo/filtered_olympix.sarif
